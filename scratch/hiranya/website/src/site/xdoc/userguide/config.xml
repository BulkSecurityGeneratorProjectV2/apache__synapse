<?xml version="1.0" encoding="ISO-8859-1" ?>
<!--
  ~  Licensed to the Apache Software Foundation (ASF) under one
  ~  or more contributor license agreements.  See the NOTICE file
  ~  distributed with this work for additional information
  ~  regarding copyright ownership.  The ASF licenses this file
  ~  to you under the Apache License, Version 2.0 (the
  ~  "License"); you may not use this file except in compliance
  ~  with the License.  You may obtain a copy of the License at
  ~
  ~   http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~  Unless required by applicable law or agreed to in writing,
  ~  software distributed under the License is distributed on an
  ~   * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  ~  KIND, either express or implied.  See the License for the
  ~  specific language governing permissions and limitations
  ~  under the License.
  -->

<document>
    <properties>
        <title>Apache Synapse - Configuration Language Guide</title>
    </properties>
    <body>
        <section name="Contents">
            
        </section>
        <section name="Introduction">
            <p>
                Apache Synapse reads its configuration from a set of XML files.  This allows the
                configuration to be easily hand edited, backed up from the file system, or even
                included in a version control system for easier management and control (e.g. moving
                a configuration from development, through QA, staging and into production). All these
                XML configuration files are housed under the repository/conf/synapse-config directory.
            </p>
            <p>
                Synapse also has the ability to load certain configuration elements from an external
                registry. When using a registry to hold pieces of the configuration, certain items
                such as endpoint definitions, sequences and local entries can be updated dynamically
                while the Synapse ESB is executing.
            </p>
            <p>
                This article describes the hierarchy or XML files from which Synapse loads its
                configuration. It describes the high level structure of the file set and the XML
                syntax used to configure various elements in the Synapse configuration.
            </p>
        </section>
        <section name="The Synapse Configuration">
            <p>
                A typical Synapse configuration is comprised of sequences, endpoints, proxy services
                and local entries. In certain advanced scenarios, Synapse configuration may also
                contain scheduled tasks, event sources, messages stores and priority executors.
                Synapse configuration may also include a registry adapter through which Synapse can
                import various resources to the mediation engine at runtime. Following diagram
                illustrates different components of the Synapse configuration and how they interact
                with each other.
            </p>
            <!-- Image goes here -->
            <p>
                All the functional components of the Synapse configuration are configured through
                XML files. The Synapse configuration language governs the XML syntax used to define
                and configure different types of components. This configuration language is now
                available as a <a href="http://synapse.apache.org/ns/2010/04/configuration/synapse_config.xsd">XML schema</a>.
            </p>
            <p>
                Typically the Synapse ESB is deployed between an actual client and a back-end service
                implementation to mediate the message flow. Therefore the Synapse ESB can accept a
                message on behalf of the actual service, perform authentication, validation, transformation,
                logging, routing and then decide the destination endpoint for the message and direct
                it to an actual service. The Synapse ESB can also detect timeouts and transport failures
                during communication or introduce load balancing, throttling or caching where necessary.
                For fault scenarios such as authentication failures or schema validation failures, the
                Synapse ESB can be configured to return a custom message or a fault to the requesting
                client without forwarding the request to the actual service. All these scenarios
                and usecases can be put into action by selecting the right set of functional components
                and combining them appropriately in the Synapse configuration.
            </p>
            <p>
                Depending on how functional components are used in the Synapse configuration, Synapse
                can execute in one or more of the following operational modes.
            </p>
            <subsection name="Service Mediation (Proxy Services)">
                <p>
                    In service mediation, the Synapse ESB exposes a service endpoint on the ESB, which
                    accepts messages from clients. Typically these services acts as proxies for existing
                    (external) services, and the role of Synapse would be to 'mediate' these messages
                    before they are delivered to the actual service. In this mode, Synapse could expose
                    a service already available in one transport, over a different transport; or expose
                    a service that uses one schema or WSDL as a service that uses a different schema or
                    WSDL. A Proxy service could define the transports over which the service is exposed,
                    and point to the mediation sequences that should be used to process request and
                    response messages. A proxy service maybe a SOAP or a REST/POX service over HTTP/S or
                    SOAP, POX, plain text or binary/legacy service for other transports such as JMS
                    and VFS file systems.
                </p>
            </subsection>
            <subsection name="Message Mediation">
                <p>
                    In message mediation, Synapse acts as a transparent proxy for clients. This way,
                    Synapse could be configured to filter all the messages on a network for logging,
                    access control etc, and could 'mediate' messages without the explicit knowledge
                    of the original client. If Synapse receives a message that is not accepted by any
                    proxy service, that message is handled through message mediation. Message mediation
                    always processes messages according to the mediation sequence defined as 'main'.
                </p>
            </subsection>
            <subsection name="Task Scheduling">
                <p>
                    In task scheduling, Synapse can execute a predefined task based on a user
                    specified schedule. This way a task can be configured to run exactly once or
                    multiple times with fixed intervals. The schedule can be defined by specifying
                    the number of times the task should be executed and the interval between
                    executions. Alternatively one may use the Unix Cron syntax to define task
                    schedules. This mode of operation can be used to periodically invoke a given
                    service, poll databases and execute other periodic maintenance activities.
                </p>
            </subsection>
            <subsection name="Eventing">
                <p>
                    In eventing mode, Synapse can be used as an event source and users or systems can
                    subscribe to receive events from Synapse. Synapse can also act as an event broker
                    which receives events from other systems and delivers them to the appropriate
                    subscribers with or without mediation. The set of subsribers will be selected
                    by applying a predefined filter criteria. This mode enables Synapse to integrate
                    applications and systems based on the Event Driven Architecture (EDA).
                </p>
            </subsection>
        </section>
        <section name="Functional Components Overview">
            <p>
                We have already skimmed through some of the functional components available in
                Synapse configuration. This section provides detailed information about each of
                functional component types.
            </p>
            <subsection name="Mediators and Sequences">
                <p>
                    The Synapse ESB defines a 'mediator' as a component which performs a predefined
                    action on a message during the message flow. Thus a mediator gets full access to
                    a message at the point where it is defined to gain control, and could inspect the
                    message, modify it or take an external action depending on some attributes or
                    values of the current message. Writing a custom mediator in Java is easy
                    and the supplementary documentation provides more details on this. The 'Class' and
                    'POJO (command)' mediators allow one to plugin a Java class into the Synapse
                    engine with minimal effort. In addition, the Script mediator allows one to provide
                    an Apache BSF script (e.g. Javascript, Ruby, Groovy etc) for mediation.
                </p>
                <p>
                    A mediation sequence, commonly called a 'sequence' is a list of mediators. A
                    sequence may be named for re-use, or defined in-line or anonymously within a
                    configuration. Sequences may be defined within the Synapse configuration or within
                    the Registry.
                </p>
                <p>
                    A Synapse configuration contains two special sequences named 'main' and 'fault'.
                    These too may be defined in the Synapse configuration, or externally in the
                    Registry. If either is not found, a suitable default configuration is generated at
                    runtime by the ESB. The default 'main' sequence will simply send a message without
                    any mediation, while the default 'fault' sequence would log the message and error
                    details and stop further processing. The 'fault' sequence executes whenever Synapse
                    itself encounters an error while processing a message, or when a fault handler has
                    not been defined to handle exceptions. A sequence can assign another named sequence
                    as its 'fault' handler sequence, and handover control to the fault handler if an
                    error is encountered during the execution of the initial sequence.
                </p>
            </subsection>
            <subsection name="Endpoints">
                <p>
                    An Endpoint definition within Synapse defines an external service endpoint and
                    any attributes or semantics that should be followed when communicating with that
                    endpoint. An endpoint definition can be named for re-use, or defined in-line or
                    anonymously within a configuration. Typically an endpoint would be based on a
                    service address or a WSDL. Additionally the Synapse ESB supports Failover and
                    Load-balance endpoints - which are defined over a group of endpoints. Endpoints
                    may be defined within the local Synapse configuration or within the Registry.
                </p>
            </subsection>
            <subsection name="Tasks">
                <p>
                    A task is a custom Java class that implements the org.apache.synapse.task.Task
                    interface which contains a single "public void execute()" method. Such a task can
                    be scheduled and managed via the Synapse ESB. The scheduling information for a
                    task can be specified in the cron format or a simple format by the user. A task
                    may also be specified as a one-time task where required, and can be used to trigger
                    a callout or inject a message into the Synapse ESB.
                </p>
            </subsection>
            <subsection name="Remote Registry and Local Registry (Local Entries)">
                <p>
                    Synapse configuration can refer to an external registry/repository for resources
                    used such as WSDL, schemas, scripts, XSLT and XQuery transformations etc. One or
                    more remote registries may be hidden or merged behind a local registry interface
                    defined in the Synapse configuration. Resources from an external registry are
                    looked up using 'keys' - which are known to the external registry. The Synapse
                    ESB ships with a simple URL based registry implementation that uses the file system
                    for storage of resources, and URL's or fragments as 'keys'.
                </p>
                <p>
                    A registry may define a duration for which a resource served may be cached by the
                    Synapse runtime. If such a duration is specified, the Synapse ESB is capable of
                    refreshing the resource after cache expiry to support dynamic re-loading of resource
                    at runtime. Optionally, a configuration could define certain 'keys' to map to locally
                    defined entities. These entities may refer to a source URL or file, or may be defined
                    as in-line XML or text within the configuration itself. If a registry contains a
                    resource whose 'key' matches the key of a locally defined entry, the local entry
                    shadows the resource available in the registry. Thus it is possible to override
                    registry resources locally from within a configuration. To integrate Synapse with
                    a custom/new registry, one needs to implement the org.apache.synapse.registry.Registry
                    interface to suit the actual registry being used.
                </p>
            </subsection>
            <subsection name="Event Sources">

            </subsection>
            <subsection name="Priority Executors">

            </subsection>
            <subsection name="Message Stores">
                
            </subsection>
        </section>
        <section name="Synapse Configuration Files">
            <p>
                All the XML files pertaining to Synapse configuration are available in the
                repository/conf/synapse-config directory of the Synapse installation. This file
                heirarchy consists of two files named synapse.xml and registry.xml. In addition to
                that, following subdirectories can be found in the synapse-config directory.
            </p>
            <ul>
                <li>endpoints</li>
                <li>events</li>
                <li>local-entries</li>
                <li>proxy-services</li>
                <li>sequences</li>
                <li>tasks</li>
            </ul>
            <p>
                Each of these subdirectories can contain zero or more configuration items. For
                an example the 'endpoints' directory may contain zero or more endpoint definitions
                and the 'sequences' directory may contain zero or more sequence definitions. The
                registry adapter is defined in the top level registry.xml file. The synapse.xml file
                is there mainly for backward compatibility reasons. It can be used to define any
                type of configuration items. One may define few endpoints in the 'endpoints' directory
                and a few endpoints in the synapse.xml file. However it is recommended to stick to
                a single, consistent way of defining configuration elements.
            </p>
            <p>
                The following tree diagram shows the high-level view of the resulting file
                heirarchy.
            </p>
            <div class="consoleOutput">synapse-config
            |-- endpoints
            |   `-- foo.xml
            |-- events
            |   `-- event1.xml
            |-- local-entries
            |   `-- bar.xml
            |-- proxy-services
            |   |-- proxy1.xml
            |   |-- proxy2.xml
            |   `-- proxy3.xml
            |-- registry.xml
            |-- sequences
            |   |-- custom-logger.xml
            |   |-- fault.xml
            |   `-- main.xml
            |-- synapse.xml
            `-- tasks
                `-- task1.xml</div>
        </section>
        <section name="Contents of the synapse.xml File">
            <p>
                As stated earlier, the synapse.xml file can be used to define all kinds of artifacts.
                All these different configuration items should be wrapped in a top level
                'definitions' element. A configuration defined in the synapse.xml file looks like
                this at the high level.
            </p>
            <div class="xmlConf">&lt;definitions&gt;
   &lt;<a href="#registry">registry</a> provider="string"&gt;...&lt;/registry&gt;?
   &lt;<a href="#localEntry">localEntry</a> key="string"&gt;...&lt;/localEntry&gt;?
   &lt;<a href="#sequence">sequence</a> name="string"&gt;...&lt;/sequence&gt;?
   &lt;<a href="#endpoint">endpoint</a> name="string"&gt;...&lt;/endpoint&gt;?
   &lt;<a href="#proxy">proxy</a> name="string" ...&gt;...&lt;/proxy&gt;?
   &lt;<a href="#task">task</a> name="string" ...&gt;...&lt;/task&gt;?
   &lt;<a href="#eventsource">eventSource</a> name="string" ...&gt;...&lt;/eventSource&gt;?
   &lt;<a href="#executor">executor</a> name="string" ...&gt;...&lt;/executor&gt;?
   &lt;<a href="#store">messageStore</a> name="string" ...&gt;...&lt;/messageStore&gt;?
 &lt;/definitions&gt;</div>
            <p>
                The registry adapter definition is defined under the &lt;registry&gt; element. Similarly
                &lt;endpoint&gt;, &lt;sequence&gt;, &lt;proxy&gt;, &lt;localEntry&gt;, &lt;eventSource
                and &lt;executor&gt; elements are used to define other functional components.
            </p>
            <p>
                As pointed out earlier, the synapse.xml file is there in the synapse-config directory
                for backwards compatibility reasons. Any artifact defined in this file can be
                defined separately in its own XML file. The registry can be defined in the registry.xml
                and other artifacts can be defined in the corresponding subdirectories of the synapse-config
                directory. However the XML syntax used to configure these artifacts are always the same.
                Next few sections of this document explains the XML syntax for defining various
                types of components in the Synapse configuration.
            </p>
        </section>
        <section name="Registry" id="registry">
            <p>
                The &lt;registry&gt; element is used to define the remote registry used by the
                Synapse runtime. The registry provider specifies an implementation class for the
                registry being used, and optionally a number of configuration parameters as may be
                required by the particular registry implementation. An outline configuration is given
                below.
            </p>
            <div class="xmlConf">&lt;registry provider="string"/&gt;
    &lt;parameter name="string"&gt;text | xml&lt;/parameter&gt;*
&lt;/registry&gt;</div>
            <p>
                Registry entries loaded from a remote registry may be cached as governed by the
                registry, and reloaded after the cache periods expires if a newer version is found.
                Hence it is possible to define configuration elements such as (dynamic) sequences and
                endpoints, as well as resources such as XSLT's, scripts or XSDs in the registry, and
                update the configuration as these are allowed to dynamically change over time.
            </p>
            <p>
                Synapse ships with a built-in URL based registry implementation called the
                'SimpleURLRegistry' and this can be configured as follows:
            </p>
            <div class="xmlConf">&lt;registry provider="org.apache.synapse.registry.url.SimpleURLRegistry"&gt;
  &lt;parameter name="root"&gt;file:./repository/conf/sample/resources/&lt;/parameter&gt;
  &lt;parameter name="cachableDuration"&gt;15000&lt;/parameter&gt;
&lt;/registry&gt;</div>
            <p>
                The 'root' parameter specifies the root URL of the registry for loaded resources. The
                SimpleURLRegistry keys are path fragments, that when combined with the root prefix
                would form the full URL for the referenced resource. The 'cachableDuration' parameter
                specifies the number of milliseconds for which resources loaded from the registry
                should be cached. More advanced registry implementations allows different cachable
                durations to be specified for different resources, or mark some resources as never
                expires. (e.g. Check the WSO2 ESB implementation based on Apache Synapse)
            </p>
        </section>
    </body>
</document>